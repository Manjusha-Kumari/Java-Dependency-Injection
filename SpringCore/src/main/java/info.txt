    <!-- ============================================================================= -->
    <!-- To inject a collection type object -->
    <!-- 
    	1. List:
    	<bean>
	    	<property name="">
	    		<list>
	    			<value>10</value>
	    			<value>101</value>
	    			<value>1011</value>
	    			<value>108</value>
	    			<null/>
	    		</list>
	    	</property>
	    </bean>
	    
	    
	    
	    2. Set:
	    <bean>
	    	<property name="">
	    		<set>
	    			<value>10</value>
		    		<value>101</value>
		    		<value>1011</value>
		    		<value>108</value>
	    		</set>
	    	</property>
	    </bean>
	    
	    
	    
	    3. Map:
	    <bean>
	    	<property name="">
	    		<map>
	    			<entry key="java" value="2month" />
	    			<entry key="python" value="9month" />
	    		</map>
	    	</property>
	    </bean>
	    
	    
	    
	    4. Property:
	    <bean>
	    	<property name="">
	    		<props>
	    			<prop key="name">Radha</prop>
	    			<prop key="age">34</prop>
	    		</props>
	    	</property>
	    </bean>
    -->
    
    
    
================================================================================
Reference Type injection 
i.e, basically injecting an object into other object

lets say we have a class A which needs reference of object B
A
Reference injection:
B

<bean>
	<property name="A">
		<ref bean="B" />
	</property>
</bean>




==============================================================================================
Injection using constructor 

Here we can use C Schema (Constructor) as at the time of setter injection we used P Schema (property)



==================================================================================================
bean lifecycle if we see the response the init method is called but the destroy method is not called 
so in order to call the destroy method we need to enable pre shutdown hook on the context

response before pre shutdown hook
	Setting property
	Inside init method
	Tool [price=30.25]

we cannot use this pre shut down hook with the ApplicationContext class in order to do so we need to use 
one of its parent class AbstractApplicationContext and then use the registerShutdownHook
After this change 
	AbstractApplicationContext context = new ClassPathXmlApplicationContext("com/springcore/SpringCore/LifeCycle/LifeCycleConfig.xml");
	context.registerShutdownHook();

response :
	Setting property
	Inside init method
	Tool [price=30.25]
	Inside destroy method

	
	


========================================================================================================================
Bean life cycle using annotations 
we need to use annotations @postConstruct and @preDestroy here as init and destroy respectively.

However, if our project uses Spring 5.3.x and JDK 9 or a later version, since Spring 5.3.x only supports the javax namespace,
we must explicitly add the javax.annotation-api dependency to our project:
<dependency>
    <groupId>javax.annotation</groupId>
    <artifactId>javax.annotation-api</artifactId>
    <version>1.3.2</version>
</dependency>

Also even after adding these in the code it do not seems to work as by default these annotations are disabled we need to enable it.
So in order to do that we use <context: annotation-config> --> it enables all the annotations present in the package.




















